{"version":3,"sources":["actions/company.js","components/footer.js","actions/guestForm.js","components/guestForm.js","components/save-company.js","components/homePage.js","dashboard-central/dashboard-central.js","App.js","serviceWorker.js","reducers/side.js","reducers/guestForm.js","reducers/company.js","reducers/index.js","store.js","index.js"],"names":["openCompanyFormDialog","open","type","saveDataCompany","data","Footer","className","Component","openGuestFormDialog","GuestForm","handleClose","props","alert","JSON","stringify","this","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","initialValues","age","postcode","situation","status","onSubmit","values","actions","setTimeout","setSubmitting","validate","errors","test","canSubmit","form","field","name","component","as","value","DialogActions","Button","onClick","color","connect","state","mode","side","guestForm","dispatch","SaveCompany","context","bind","validateForm","url","title","description","category","render","placeholder","autoComplete","touched","row","onChange","event","label","company","withRouter","HomePage","variant","React","openCompany","DashboardCentral","initializeIcons","App","nothing","axios","get","then","res","console","log","catch","error","finally","path","fetchDataCompany","Boolean","window","location","hostname","match","initialState","action","_","xhr","XMLHttpRequest","response","send","rootReducer","combineReducers","createStore","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2424221a.chunk.js","sourcesContent":["export const openCompanyFormDialog = open => {\n  return {\n    type: \"OPEN_COMPANY_DIALOG\",\n    open\n  };\n};\n\nexport const saveDataCompany = data => {\n  return {\n    type: \"SAVE_COMPANY_DATA\",\n    data\n  };\n};\n\nexport const fetchDataCompany = () => {\n  return {\n    type: \"FETCH_COMPANY_DATA\"\n  };\n};\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return <footer className=\"footer\"></footer>;\n  }\n}\n\nexport default Footer;\n","export const openGuestFormDialog = (open) => {\n  return {\n    type : \"OPEN_GUEST_DIALOG\",\n    open\n  }\n} ","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { openGuestFormDialog } from \"../actions/guestForm\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nclass GuestForm extends Component {\n\n  handleClose = () => {\n    this.props.openGuestFormDialog(false);\n  }\n\n  situationChange(data) {\n    alert(data)\n  }\n\n  submit(data) {\n    alert(JSON.stringify(data))\n  }\n\n  render() {\n    const { open } = this.props\n    return (\n      <div>\n        <Dialog open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">Bienvenue</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Dans le but de t'aider au mieux nous avons besoin de quelques infos a props de toi, elles ne seront pas stockées par la suite (promis 😁 )\n            </DialogContentText>\n            <Formik\n              initialValues={{ age: 20, postcode: 31000, situation: 1, status: 12 }}\n              onSubmit={(values, actions) => {\n                setTimeout(() => {\n                  alert(JSON.stringify(values, null, 2));\n                  this.props.openGuestFormDialog(false)\n                  actions.setSubmitting(false)\n                }, 1000)\n              }}\n              validate={values => {\n                const errors = {}\n                if (!values.age) {\n                  errors.age = 'Ton age est recquis'\n                } else if (\n                  !/^0*(?:[1-9][0-9]?|100)$/.test(values.age)\n                ) {\n                  errors.age = 'Ton age est incorrect'\n                }\n                if (!values.postcode) {\n                  errors.postcode = 'Ton code postal est recquis'\n                }\n                else if (\n                  !/^\\d{5}$/.test(values.postcode)\n                ) {\n                  errors.postcode = 'Ton code postal est incorrect'\n                }\n                return errors\n              }}\n            >\n              {({ canSubmit, errors, values, form, field }) => (\n                <Form>\n                  <Field type=\"number\" name=\"age\" />\n                  <ErrorMessage name=\"age\" component=\"div\" />\n                  <Field type=\"text\" name=\"postcode\" />\n                  <ErrorMessage name=\"postcode\" component=\"div\" />\n                  tu es:\n                  <Field as=\"select\" name=\"situation\">\n                    <option value={1}>Célibataire</option>\n                    <option value={2} >Concubiné</option>\n                    <option value={3} >Marié</option>\n                    <option value={4} >Pacsé</option>\n                  </Field>\n                  et :\n                  <Field as=\"select\" name=\"status\">\n                    <option value={1}>Etudiant</option>\n                    <option value={2} >Alternant Contra Pro</option>\n                    <option value={3} >Alternant Contra Apprentissage</option>\n                    <option value={4} >Chomage</option>\n                  </Field>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n            </Button>\n                <Button type =\"submit\" color=\"primary\">\n                  Subscribe\n            </Button>\n              </DialogActions>\n                </Form>\n              )}\n            </Formik>\n          </DialogContent>\n        </Dialog>\n      </div >\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.side.mode,\n    open: state.guestForm.open\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openGuestFormDialog: open => {\n      dispatch(openGuestFormDialog(open));\n    }\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestForm);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport { openCompanyFormDialog, saveDataCompany } from \"../actions/company\";\nimport { connect } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nclass SaveCompany extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  handleClose = () => {\n    this.props.openGuestFormDialog(false);\n  };\n\n  onSubmit(values) {\n    this.props.saveDataCompany(values);\n  }\n\n  validateForm(values) {\n    let errors = {};\n    if (!values.name) {\n      errors.name = \"Cette zone est obligatoire\";\n    }\n    if (!values.status) {\n      errors.status = \"Cette zone est obligatoire\";\n    }\n    if (!values.url) {\n      errors.url = \"Cette zone est obligatoire\";\n    }\n    if (!values.title) {\n      errors.title = \"Cette zone est obligatoire\";\n    }\n    if (!values.description) {\n      errors.description = \"Cette zone est obligatoire\";\n    }\n    if (!values.category) {\n      errors.category = \"Cette zone est obligatoire\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { open } = this.props;\n    return (\n      <div className=\"save-company-container\">\n        <Dialog\n          open={open}\n          onClose={this.handleClose}\n          aria-labelledby=\"form-dialog-title\"\n        >\n          <DialogContent>\n            <div className=\"company-title\">Formulaire Entreprise</div>\n            <Formik\n              initialValues={\n                ({ name: \"\" },\n                { status: \"\" },\n                { url: \"\" },\n                { title: \"\" },\n                { description: \"\" },\n                { category: \"Logement\" })\n              }\n              validate={this.validateForm}\n              onSubmit={this.onSubmit}\n              render={() => (\n                <Form className=\"full-width\">\n                  <div className=\"company-title-company\">Entreprise</div>\n                  <Field\n                    name=\"name\"\n                    render={({ field, form }) => (\n                      <div>\n                        <div className=\"company-input\">\n                          <input\n                            type=\"name\"\n                            placeholder=\"Nom entreprise\"\n                            {...field}\n                            autoComplete=\"name\"\n                          />\n                        </div>\n                        <div className=\"form-error\">\n                          {form.touched.name && form.errors.name && (\n                            <div>{form.errors.name}</div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <Field\n                    name=\"status\"\n                    render={({ field, form }) => (\n                      <div>\n                        <div className=\"company-input\">\n                          <input\n                            type=\"status\"\n                            placeholder=\"Statut\"\n                            {...field}\n                            autoComplete=\"status\"\n                          />\n                        </div>\n                        <div className=\"form-error\">\n                          {form.touched.status && form.errors.status && (\n                            <div>{form.errors.status}</div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <Field\n                    name=\"url\"\n                    render={({ field, form }) => (\n                      <div>\n                        <div className=\"company-input\">\n                          <input\n                            type=\"url\"\n                            placeholder=\"URL\"\n                            {...field}\n                            autoComplete=\"url\"\n                          />\n                        </div>\n                        <div className=\"form-error\">\n                          {form.touched.url && form.errors.url && (\n                            <div>{form.errors.url}</div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <div className=\"company-separator\"></div>\n                  <div className=\"company-title-company\">Aide</div>\n                  <Field\n                    name=\"title\"\n                    render={({ field, form }) => (\n                      <div>\n                        <div className=\"company-input\">\n                          <input\n                            type=\"title\"\n                            placeholder=\"Titre de l'aide\"\n                            {...field}\n                            autoComplete=\"title\"\n                          />\n                        </div>\n                        <div className=\"form-error\">\n                          {form.touched.title && form.errors.title && (\n                            <div>{form.errors.title}</div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <Field\n                    name=\"description\"\n                    render={({ field, form }) => (\n                      <div>\n                        <div className=\"company-input\">\n                          <input\n                            type=\"description\"\n                            row=\"5\"\n                            placeholder=\"Description\"\n                            {...field}\n                            autoComplete=\"description\"\n                          />\n                        </div>\n                        <div className=\"form-error\">\n                          {form.touched.description &&\n                            form.errors.description && (\n                              <div>{form.errors.description}</div>\n                            )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <Field\n                    name=\"category\"\n                    render={({ field, form }) => (\n                      <div>\n                        <select\n                          onChange={event => {}}\n                          className=\"field-company\"\n                          {...field}\n                        >\n                          <option value=\"\" label=\"Selectionner une catégorie\" />\n                          <option value=\"Alimentaire\" label=\"Alimentaire\" />\n                          <option value=\"Logement\" label=\"Logement\" />\n                          <option value=\"Culture\" label=\"Culture\" />\n                          <option value=\"Sport\" label=\"Sport\" />\n                        </select>\n                        <div className=\"nr-error\">\n                          {form.touched.category && form.errors.category && (\n                            <div>{form.errors.category}</div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n                  />\n                  <DialogActions>\n                    <Button onClick={this.handleClose} color=\"primary\">\n                      Cancel\n                    </Button>\n                    <Button type=\"submit\" color=\"primary\">\n                      Valider\n                    </Button>\n                  </DialogActions>\n                </Form>\n              )}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.side.mode,\n    open: state.company.open,\n    data: state.company.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openGuestFormDialog: open => {\n      dispatch(openCompanyFormDialog(open));\n    },\n    saveDataCompany: data => {\n      dispatch(saveDataCompany(data));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(SaveCompany));\n","import React from \"react\";\nimport { openGuestFormDialog } from \"../actions/guestForm\";\nimport { openCompanyFormDialog } from \"../actions/company\";\nimport { connect } from \"react-redux\";\nimport Button from \"@material-ui/core/Button\";\n\nclass HomePage extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Bienvenue sur EconomiseUnMaxDeTunes.argent</h1>\n        <p>\n          Si toi aussi tu aimes l'argent et surtout quand il reste sur ton\n          compte\n        </p>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            this.props.openGuestFormDialog(true);\n          }}\n          color=\"secondary\"\n        >\n          Economise!\n        </Button>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            this.props.openCompanyFormDialog(true);\n          }}\n          color=\"primary\"\n        >\n          Propose des économies\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.side.mode,\n    open: state.guestForm.open,\n    openCompany: state.company.open\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openGuestFormDialog: open => {\n      dispatch(openGuestFormDialog(open));\n    },\n    openCompanyFormDialog: open => {\n      dispatch(openCompanyFormDialog(open));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { openGuestFormDialog } from \"../actions/guestForm\";\nimport GuestForm from \"../components/guestForm\";\nimport CompanyForm from \"../components/save-company\";\nimport HomePage from \"../components/homePage\";\n\nclass DashboardCentral extends Component {\n  render() {\n    return (\n      <div>\n        <HomePage />\n        <GuestForm />\n        <CompanyForm />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    mode: state.side.mode,\n    open: state.guestForm.open\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    openGuestFormDialog: open => {\n      dispatch(openGuestFormDialog(open));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardCentral);\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { initializeIcons } from \"office-ui-fabric-react/lib-commonjs/Icons\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\n\nimport { fetchDataCompany, saveDataCompany } from \"./actions/company\";\nimport Footer from \"./components/footer\";\nimport DashboardCentral from \"./dashboard-central/dashboard-central\";\nimport \"./assets/styles/main.scss\";\n\ninitializeIcons();\n\nclass App extends Component {\n  componentDidMount() {\n    let nothing = \"nothing\";\n    axios\n      .get(`http://nas.orriere.com/api/organizations/?format=json`)\n      .then(res => {\n        console.log(\"res\");\n        alert(res);\n        nothing = \"something\";\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .finally(function() {\n        console.log(\"finally\", nothing);\n      });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div\n          className={`dashboard${this.props.mode === \"light\" ? \" light\" : \"\"}`}\n        >\n          <div className=\"dashboard-content\">\n            <Switch>\n              <Route path=\"/other\" render={() => <div>Other</div>} />\n              <Route component={DashboardCentral} />\n            </Switch>\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchDataCompany: () => {\n      dispatch(fetchDataCompany());\n    },\n    saveDataCompany: data => {\n      dispatch(saveDataCompany(data));\n    }\n  };\n};\n\nconst mapStateToProps = state => {\n  return { mode: state.side.mode };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n  mode: \"\"\n};\n\nfunction side(state = initialState, action) {\n  switch (action.type) {\n    case \"SET_MODE\":\n      return {\n        ...state,\n        mode: action.mode\n      };\n    default:\n      return state;\n  }\n}\n\nexport default side;\n","const initialState = {\n  open: false\n};\n\nfunction guestForm(state = initialState, action) {\n  switch (action.type) {\n    case \"OPEN_GUEST_DIALOG\":\n      return {\n        ...state,\n        open: action.open\n      };\n    default:\n      return state;\n  }\n}\n\nexport default guestForm;\n","import * as _ from \"lodash\";\nconst initialState = {\n  open: false,\n  data: []\n};\n\nfunction company(state = initialState, action) {\n  switch (action.type) {\n    case \"OPEN_COMPANY_DIALOG\":\n      return {\n        ...state,\n        open: action.open\n      };\n    case \"SAVE_COMPANY_DATA\":\n      const updatedCompany = _.concat(state.data, action.data);\n      return {\n        ...state,\n        data: updatedCompany\n      };\n    case \"FETCH_COMPANY_DATA\":\n      let xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", \"nas.orriere.com/api/organizations/?format=json\");\n      const response = xhr.send();\n      return { response };\n    default:\n      return state;\n  }\n}\n\nexport default company;\n","import { combineReducers } from \"redux\";\nimport side from \"./side\";\nimport guestForm from \"./guestForm\";\nimport company from \"./company\";\n\nconst rootReducer = combineReducers({\n  side,\n  guestForm,\n  company\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./assets/styles/main.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}