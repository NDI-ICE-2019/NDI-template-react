{"version":3,"sources":["actions/company.js","components/footer.js","actions/guestForm.js","components/guestForm.js","components/save-company.js","components/homePage.js","dashboard-central/dashboard-central.js","App.js","serviceWorker.js","reducers/side.js","reducers/guestForm.js","reducers/company.js","reducers/index.js","store.js","index.js"],"names":["openCompanyFormDialog","open","type","saveDataCompany","data","Footer","className","Component","openGuestFormDialog","GuestForm","handleClose","props","alert","JSON","stringify","this","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","initialValues","age","postcode","situation","status","onSubmit","values","actions","setTimeout","setSubmitting","validate","errors","test","canSubmit","form","field","name","component","as","value","DialogActions","Button","onClick","color","connect","state","mode","side","guestForm","dispatch","SaveCompany","context","bind","validateForm","url","title","description","category","render","placeholder","autoComplete","touched","row","onChange","event","label","company","withRouter","HomePage","variant","React","openCompany","DashboardCentral","initializeIcons","App","nothing","axios","get","then","res","console","log","catch","error","finally","path","fetchDataCompany","Boolean","window","location","hostname","match","initialState","action","_","xhr","XMLHttpRequest","response","send","rootReducer","combineReducers","createStore","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAAaA,EAAwB,SAAAC,GACnC,MAAO,CACLC,KAAM,sBACND,SAISE,EAAkB,SAAAC,GAC7B,MAAO,CACLF,KAAM,oBACNE,SCFWC,E,iLAJX,OAAO,4BAAQC,UAAU,e,GAFRC,aCFRC,EAAsB,SAACP,GAClC,MAAO,CACLC,KAAO,oBACPD,S,8DCQEQ,E,2MAEJC,YAAc,WACZ,EAAKC,MAAMH,qBAAoB,I,+EAGjBJ,GACdQ,MAAMR,K,6BAGDA,GACLQ,MAAMC,KAAKC,UAAUV,M,+BAGb,IAAD,OACCH,EAASc,KAAKJ,MAAdV,KACR,OACE,6BACE,kBAACe,EAAA,EAAD,CAAQf,KAAMA,EAAMgB,QAASF,KAAKL,YAAaQ,kBAAgB,qBAC7D,kBAACC,EAAA,EAAD,CAAaC,GAAG,qBAAhB,aACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gKAGA,kBAAC,IAAD,CACEC,cAAe,CAAEC,IAAK,GAAIC,SAAU,KAAOC,UAAW,EAAGC,OAAQ,IACjEC,SAAU,SAACC,EAAQC,GACjBC,WAAW,WACTnB,MAAMC,KAAKC,UAAUe,EAAQ,KAAM,IACnC,EAAKlB,MAAMH,qBAAoB,GAC/BsB,EAAQE,eAAc,IACrB,MAELC,SAAU,SAAAJ,GACR,IAAMK,EAAS,GAgBf,OAfKL,EAAOL,IAGT,0BAA0BW,KAAKN,EAAOL,OAEvCU,EAAOV,IAAM,yBAJbU,EAAOV,IAAM,sBAMVK,EAAOJ,SAIT,UAAUU,KAAKN,EAAOJ,YAEvBS,EAAOT,SAAW,iCALlBS,EAAOT,SAAW,8BAObS,IAGR,cAAGE,UAAH,EAAcF,OAAd,EAAsBL,OAAtB,EAA8BQ,KAA9B,EAAoCC,MAApC,OACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOpC,KAAK,SAASqC,KAAK,QAC1B,kBAAC,IAAD,CAAcA,KAAK,MAAMC,UAAU,QACnC,kBAAC,IAAD,CAAOtC,KAAK,OAAOqC,KAAK,aACxB,kBAAC,IAAD,CAAcA,KAAK,WAAWC,UAAU,QAJ1C,SAME,kBAAC,IAAD,CAAOC,GAAG,SAASF,KAAK,aACtB,4BAAQG,MAAO,GAAf,kBACA,4BAAQA,MAAO,GAAf,gBACA,4BAAQA,MAAO,GAAf,YACA,4BAAQA,MAAO,GAAf,aAVJ,OAaE,kBAAC,IAAD,CAAOD,GAAG,SAASF,KAAK,UACtB,4BAAQG,MAAO,GAAf,YACA,4BAAQA,MAAO,GAAf,wBACA,4BAAQA,MAAO,GAAf,kCACA,4BAAQA,MAAO,GAAf,YAEN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,EAAKnC,YAAaoC,MAAM,WAAzC,UAGA,kBAACF,EAAA,EAAD,CAAQ1C,KAAM,SAAS4C,MAAM,WAA7B,wB,GA7EQvC,aA0GTwC,cAfS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,KAAKD,KACjBhD,KAAM+C,EAAMG,UAAUlD,OAIC,SAAAmD,GACzB,MAAO,CACL5C,oBAAqB,SAAAP,GACnBmD,EAAS5C,EAAoBP,OAKpB8C,CAA6CtC,G,QC3GtD4C,E,YACJ,WAAY1C,EAAO2C,GAAU,IAAD,8BAC1B,4CAAM3C,EAAO2C,KAKf5C,YAAc,WACZ,EAAKC,MAAMH,qBAAoB,IAL/B,EAAKoB,SAAW,EAAKA,SAAS2B,KAAd,gBAChB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHM,E,sEAUnB1B,GACPd,KAAKJ,MAAMR,gBAAgB0B,K,mCAGhBA,GACX,IAAIK,EAAS,GAmBb,OAlBKL,EAAOU,OACVL,EAAOK,KAAO,8BAEXV,EAAOF,SACVO,EAAOP,OAAS,8BAEbE,EAAO4B,MACVvB,EAAOuB,IAAM,8BAEV5B,EAAO6B,QACVxB,EAAOwB,MAAQ,8BAEZ7B,EAAO8B,cACVzB,EAAOyB,YAAc,8BAElB9B,EAAO+B,WACV1B,EAAO0B,SAAW,8BAEb1B,I,+BAGC,IAAD,OACCjC,EAASc,KAAKJ,MAAdV,KACR,OACE,yBAAKK,UAAU,0BACb,kBAACU,EAAA,EAAD,CACEf,KAAMA,EACNgB,QAASF,KAAKL,YACdQ,kBAAgB,qBAEhB,kBAACG,EAAA,EAAD,KACE,yBAAKf,UAAU,iBAAf,yBACA,kBAAC,IAAD,CACEiB,cAME,CAAEqC,SAAU,YAEd3B,SAAUlB,KAAKyC,aACf5B,SAAUb,KAAKa,SACfiC,OAAQ,kBACN,kBAAC,IAAD,CAAMvD,UAAU,cACd,yBAAKA,UAAU,yBAAf,cACA,kBAAC,IAAD,CACEiC,KAAK,OACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,yBAAK/B,UAAU,iBACb,yCACEJ,KAAK,OACL4D,YAAY,kBACRxB,EAHN,CAIEyB,aAAa,WAGjB,yBAAKzD,UAAU,cACZ+B,EAAK2B,QAAQzB,MAAQF,EAAKH,OAAOK,MAChC,6BAAMF,EAAKH,OAAOK,WAM5B,kBAAC,IAAD,CACEA,KAAK,SACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,yBAAK/B,UAAU,iBACb,yCACEJ,KAAK,SACL4D,YAAY,UACRxB,EAHN,CAIEyB,aAAa,aAGjB,yBAAKzD,UAAU,cACZ+B,EAAK2B,QAAQrC,QAAUU,EAAKH,OAAOP,QAClC,6BAAMU,EAAKH,OAAOP,aAM5B,kBAAC,IAAD,CACEY,KAAK,MACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,yBAAK/B,UAAU,iBACb,yCACEJ,KAAK,MACL4D,YAAY,OACRxB,EAHN,CAIEyB,aAAa,UAGjB,yBAAKzD,UAAU,cACZ+B,EAAK2B,QAAQP,KAAOpB,EAAKH,OAAOuB,KAC/B,6BAAMpB,EAAKH,OAAOuB,UAM5B,yBAAKnD,UAAU,sBACf,yBAAKA,UAAU,yBAAf,QACA,kBAAC,IAAD,CACEiC,KAAK,QACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,yBAAK/B,UAAU,iBACb,yCACEJ,KAAK,QACL4D,YAAY,mBACRxB,EAHN,CAIEyB,aAAa,YAGjB,yBAAKzD,UAAU,cACZ+B,EAAK2B,QAAQN,OAASrB,EAAKH,OAAOwB,OACjC,6BAAMrB,EAAKH,OAAOwB,YAM5B,kBAAC,IAAD,CACEnB,KAAK,cACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,yBAAK/B,UAAU,iBACb,yCACEJ,KAAK,cACL+D,IAAI,IACJH,YAAY,eACRxB,EAJN,CAKEyB,aAAa,kBAGjB,yBAAKzD,UAAU,cACZ+B,EAAK2B,QAAQL,aACZtB,EAAKH,OAAOyB,aACV,6BAAMtB,EAAKH,OAAOyB,kBAM9B,kBAAC,IAAD,CACEpB,KAAK,WACLsB,OAAQ,gBAAGvB,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAV,OACN,6BACE,0CACE6B,SAAU,SAAAC,KACV7D,UAAU,iBACNgC,GAEJ,4BAAQI,MAAM,GAAG0B,MAAM,kCACvB,4BAAQ1B,MAAM,cAAc0B,MAAM,gBAClC,4BAAQ1B,MAAM,WAAW0B,MAAM,aAC/B,4BAAQ1B,MAAM,UAAU0B,MAAM,YAC9B,4BAAQ1B,MAAM,QAAQ0B,MAAM,WAE9B,yBAAK9D,UAAU,YACZ+B,EAAK2B,QAAQJ,UAAYvB,EAAKH,OAAO0B,UACpC,6BAAMvB,EAAKH,OAAO0B,eAM5B,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,EAAKnC,YAAaoC,MAAM,WAAzC,UAGA,kBAACF,EAAA,EAAD,CAAQ1C,KAAK,SAAS4C,MAAM,WAA5B,uB,GAlMMvC,aAmOXwC,cAnBS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,KAAKD,KACjBhD,KAAM+C,EAAMqB,QAAQpE,KACpBG,KAAM4C,EAAMqB,QAAQjE,OAIG,SAAAgD,GACzB,MAAO,CACL5C,oBAAqB,SAAAP,GACnBmD,EAASpD,EAAsBC,KAEjCE,gBAAiB,SAAAC,GACfgD,EAASjD,EAAgBC,OAKhB2C,CAGbuB,YAAWjB,IC1OPkB,E,iLACM,IAAD,OACP,OACE,6BACE,0EACA,sGAIA,kBAAC3B,EAAA,EAAD,CACE4B,QAAQ,YACR3B,QAAS,WACP,EAAKlC,MAAMH,qBAAoB,IAEjCsC,MAAM,aALR,cASA,kBAACF,EAAA,EAAD,CACE4B,QAAQ,YACR3B,QAAS,WACP,EAAKlC,MAAMX,uBAAsB,IAEnC8C,MAAM,WALR,iC,GAlBe2B,IAAMlE,WAmDdwC,cAnBS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,KAAKD,KACjBhD,KAAM+C,EAAMG,UAAUlD,KACtByE,YAAa1B,EAAMqB,QAAQpE,OAIJ,SAAAmD,GACzB,MAAO,CACL5C,oBAAqB,SAAAP,GACnBmD,EAAS5C,EAAoBP,KAE/BD,sBAAuB,SAAAC,GACrBmD,EAASpD,EAAsBC,OAKtB8C,CAA6CwB,GClDtDI,E,iLAEF,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANuBpE,aA2BhBwC,cAfS,SAAAC,GACtB,MAAO,CACLC,KAAMD,EAAME,KAAKD,KACjBhD,KAAM+C,EAAMG,UAAUlD,OAIC,SAAAmD,GACzB,MAAO,CACL5C,oBAAqB,SAAAP,GACnBmD,EAAS5C,EAAoBP,OAKpB8C,CAA6C4B,GCtB5DC,4B,IAEMC,E,4LAEF,IAAIC,EAAU,UACdC,IACGC,IADH,yDAEGC,KAAK,SAAAC,GACJC,QAAQC,IAAI,OACZxE,MAAMsE,GACNJ,EAAU,cAEXO,MAAM,SAASC,GAEdH,QAAQC,IAAIE,KAEbC,QAAQ,WACPJ,QAAQC,IAAI,UAAWN,O,+BAK3B,OACE,kBAAC,IAAD,KACE,yBACExE,UAAS,mBAAkC,UAApBS,KAAKJ,MAAMsC,KAAmB,SAAW,KAEhE,yBAAK3C,UAAU,qBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkF,KAAK,SAAS3B,OAAQ,kBAAM,yCACnC,kBAAC,IAAD,CAAOrB,UAAWmC,MAGtB,kBAAC,EAAD,Y,GA/BQpE,aAqDHwC,cAJS,SAAAC,GACtB,MAAO,CAAEC,KAAMD,EAAME,KAAKD,OAZD,SAAAG,GACzB,MAAO,CACLqC,iBAAkB,WAChBrC,EPxCG,CACLlD,KAAM,wBOyCNC,gBAAiB,SAAAC,GACfgD,EAASjD,EAAgBC,OAShB2C,CAA6C8B,GCvDxCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gPClBN,IAAMC,EAAe,CACnB9C,KAAM,IAeOC,MAZf,WAA6C,IAA/BF,EAA8B,uDAAtB+C,EAAcC,EAAQ,uCAC1C,OAAQA,EAAO9F,MACb,IAAK,WACH,O,qVAAO,CAAP,GACK8C,EADL,CAEEC,KAAM+C,EAAO/C,OAEjB,QACE,OAAOD,I,4NCZb,IAAM+C,EAAe,CACnB9F,MAAM,GAeOkD,MAZf,WAAkD,IAA/BH,EAA8B,uDAAtB+C,EAAcC,EAAQ,uCAC/C,OAAQA,EAAO9F,MACb,IAAK,oBACH,O,qVAAO,IACF8C,EADL,CAEE/C,KAAM+F,EAAO/F,OAEjB,QACE,OAAO+C,I,2jBCXb,IAAM+C,EAAe,CACnB9F,MAAM,EACNG,KAAM,IA0BOiE,MAvBf,WAAgD,IAA/BrB,EAA8B,uDAAtB+C,EAAcC,EAAQ,uCAC7C,OAAQA,EAAO9F,MACb,IAAK,sBACH,OAAO,KACF8C,EADL,CAEE/C,KAAM+F,EAAO/F,OAEjB,IAAK,oBAEH,OAAO,KACF+C,EADL,CAEE5C,KAHqB6F,SAASjD,EAAM5C,KAAM4F,EAAO5F,QAKrD,IAAK,qBACH,IAAI8F,EAAM,IAAIC,eAGd,OAFAD,EAAIjG,KAAK,MAAO,kDAET,CAAEmG,SADQF,EAAIG,QAEvB,QACE,OAAOrD,ICdEsD,EANKC,YAAgB,CAClCrD,OACAC,YACAkB,YCLamC,cAAYF,GCK3BzC,iBACE,kBAAC,IAAD,CAAU4C,MAAOA,GACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC,gB","file":"static/js/main.f4258b78.chunk.js","sourcesContent":["export const openCompanyFormDialog = open => {\r\n  return {\r\n    type: \"OPEN_COMPANY_DIALOG\",\r\n    open\r\n  };\r\n};\r\n\r\nexport const saveDataCompany = data => {\r\n  return {\r\n    type: \"SAVE_COMPANY_DATA\",\r\n    data\r\n  };\r\n};\r\n\r\nexport const fetchDataCompany = () => {\r\n  return {\r\n    type: \"FETCH_COMPANY_DATA\"\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return <footer className=\"footer\"></footer>;\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","export const openGuestFormDialog = (open) => {\r\n  return {\r\n    type : \"OPEN_GUEST_DIALOG\",\r\n    open\r\n  }\r\n} ","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { openGuestFormDialog } from \"../actions/guestForm\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nclass GuestForm extends Component {\r\n\r\n  handleClose = () => {\r\n    this.props.openGuestFormDialog(false);\r\n  }\r\n\r\n  situationChange(data) {\r\n    alert(data)\r\n  }\r\n\r\n  submit(data) {\r\n    alert(JSON.stringify(data))\r\n  }\r\n\r\n  render() {\r\n    const { open } = this.props\r\n    return (\r\n      <div>\r\n        <Dialog open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\r\n          <DialogTitle id=\"form-dialog-title\">Bienvenue</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Dans le but de t'aider au mieux nous avons besoin de quelques infos a props de toi, elles ne seront pas stockées par la suite (promis 😁 )\r\n            </DialogContentText>\r\n            <Formik\r\n              initialValues={{ age: 20, postcode: 31000, situation: 1, status: 12 }}\r\n              onSubmit={(values, actions) => {\r\n                setTimeout(() => {\r\n                  alert(JSON.stringify(values, null, 2));\r\n                  this.props.openGuestFormDialog(false)\r\n                  actions.setSubmitting(false)\r\n                }, 1000)\r\n              }}\r\n              validate={values => {\r\n                const errors = {}\r\n                if (!values.age) {\r\n                  errors.age = 'Ton age est recquis'\r\n                } else if (\r\n                  !/^0*(?:[1-9][0-9]?|100)$/.test(values.age)\r\n                ) {\r\n                  errors.age = 'Ton age est incorrect'\r\n                }\r\n                if (!values.postcode) {\r\n                  errors.postcode = 'Ton code postal est recquis'\r\n                }\r\n                else if (\r\n                  !/^\\d{5}$/.test(values.postcode)\r\n                ) {\r\n                  errors.postcode = 'Ton code postal est incorrect'\r\n                }\r\n                return errors\r\n              }}\r\n            >\r\n              {({ canSubmit, errors, values, form, field }) => (\r\n                <Form>\r\n                  <Field type=\"number\" name=\"age\" />\r\n                  <ErrorMessage name=\"age\" component=\"div\" />\r\n                  <Field type=\"text\" name=\"postcode\" />\r\n                  <ErrorMessage name=\"postcode\" component=\"div\" />\r\n                  tu es:\r\n                  <Field as=\"select\" name=\"situation\">\r\n                    <option value={1}>Célibataire</option>\r\n                    <option value={2} >Concubiné</option>\r\n                    <option value={3} >Marié</option>\r\n                    <option value={4} >Pacsé</option>\r\n                  </Field>\r\n                  et :\r\n                  <Field as=\"select\" name=\"status\">\r\n                    <option value={1}>Etudiant</option>\r\n                    <option value={2} >Alternant Contra Pro</option>\r\n                    <option value={3} >Alternant Contra Apprentissage</option>\r\n                    <option value={4} >Chomage</option>\r\n                  </Field>\r\n              <DialogActions>\r\n                <Button onClick={this.handleClose} color=\"primary\">\r\n                  Cancel\r\n            </Button>\r\n                <Button type =\"submit\" color=\"primary\">\r\n                  Subscribe\r\n            </Button>\r\n              </DialogActions>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mode: state.side.mode,\r\n    open: state.guestForm.open\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openGuestFormDialog: open => {\r\n      dispatch(openGuestFormDialog(open));\r\n    }\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestForm);\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { openCompanyFormDialog, saveDataCompany } from \"../actions/company\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\n\r\nclass SaveCompany extends Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.validateForm = this.validateForm.bind(this);\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.props.openGuestFormDialog(false);\r\n  };\r\n\r\n  onSubmit(values) {\r\n    this.props.saveDataCompany(values);\r\n  }\r\n\r\n  validateForm(values) {\r\n    let errors = {};\r\n    if (!values.name) {\r\n      errors.name = \"Cette zone est obligatoire\";\r\n    }\r\n    if (!values.status) {\r\n      errors.status = \"Cette zone est obligatoire\";\r\n    }\r\n    if (!values.url) {\r\n      errors.url = \"Cette zone est obligatoire\";\r\n    }\r\n    if (!values.title) {\r\n      errors.title = \"Cette zone est obligatoire\";\r\n    }\r\n    if (!values.description) {\r\n      errors.description = \"Cette zone est obligatoire\";\r\n    }\r\n    if (!values.category) {\r\n      errors.category = \"Cette zone est obligatoire\";\r\n    }\r\n    return errors;\r\n  }\r\n\r\n  render() {\r\n    const { open } = this.props;\r\n    return (\r\n      <div className=\"save-company-container\">\r\n        <Dialog\r\n          open={open}\r\n          onClose={this.handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n        >\r\n          <DialogContent>\r\n            <div className=\"company-title\">Formulaire Entreprise</div>\r\n            <Formik\r\n              initialValues={\r\n                ({ name: \"\" },\r\n                { status: \"\" },\r\n                { url: \"\" },\r\n                { title: \"\" },\r\n                { description: \"\" },\r\n                { category: \"Logement\" })\r\n              }\r\n              validate={this.validateForm}\r\n              onSubmit={this.onSubmit}\r\n              render={() => (\r\n                <Form className=\"full-width\">\r\n                  <div className=\"company-title-company\">Entreprise</div>\r\n                  <Field\r\n                    name=\"name\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <div className=\"company-input\">\r\n                          <input\r\n                            type=\"name\"\r\n                            placeholder=\"Nom entreprise\"\r\n                            {...field}\r\n                            autoComplete=\"name\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-error\">\r\n                          {form.touched.name && form.errors.name && (\r\n                            <div>{form.errors.name}</div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Field\r\n                    name=\"status\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <div className=\"company-input\">\r\n                          <input\r\n                            type=\"status\"\r\n                            placeholder=\"Statut\"\r\n                            {...field}\r\n                            autoComplete=\"status\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-error\">\r\n                          {form.touched.status && form.errors.status && (\r\n                            <div>{form.errors.status}</div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Field\r\n                    name=\"url\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <div className=\"company-input\">\r\n                          <input\r\n                            type=\"url\"\r\n                            placeholder=\"URL\"\r\n                            {...field}\r\n                            autoComplete=\"url\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-error\">\r\n                          {form.touched.url && form.errors.url && (\r\n                            <div>{form.errors.url}</div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <div className=\"company-separator\"></div>\r\n                  <div className=\"company-title-company\">Aide</div>\r\n                  <Field\r\n                    name=\"title\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <div className=\"company-input\">\r\n                          <input\r\n                            type=\"title\"\r\n                            placeholder=\"Titre de l'aide\"\r\n                            {...field}\r\n                            autoComplete=\"title\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-error\">\r\n                          {form.touched.title && form.errors.title && (\r\n                            <div>{form.errors.title}</div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Field\r\n                    name=\"description\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <div className=\"company-input\">\r\n                          <input\r\n                            type=\"description\"\r\n                            row=\"5\"\r\n                            placeholder=\"Description\"\r\n                            {...field}\r\n                            autoComplete=\"description\"\r\n                          />\r\n                        </div>\r\n                        <div className=\"form-error\">\r\n                          {form.touched.description &&\r\n                            form.errors.description && (\r\n                              <div>{form.errors.description}</div>\r\n                            )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <Field\r\n                    name=\"category\"\r\n                    render={({ field, form }) => (\r\n                      <div>\r\n                        <select\r\n                          onChange={event => {}}\r\n                          className=\"field-company\"\r\n                          {...field}\r\n                        >\r\n                          <option value=\"\" label=\"Selectionner une catégorie\" />\r\n                          <option value=\"Alimentaire\" label=\"Alimentaire\" />\r\n                          <option value=\"Logement\" label=\"Logement\" />\r\n                          <option value=\"Culture\" label=\"Culture\" />\r\n                          <option value=\"Sport\" label=\"Sport\" />\r\n                        </select>\r\n                        <div className=\"nr-error\">\r\n                          {form.touched.category && form.errors.category && (\r\n                            <div>{form.errors.category}</div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  />\r\n                  <DialogActions>\r\n                    <Button onClick={this.handleClose} color=\"primary\">\r\n                      Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\" color=\"primary\">\r\n                      Valider\r\n                    </Button>\r\n                  </DialogActions>\r\n                </Form>\r\n              )}\r\n            />\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mode: state.side.mode,\r\n    open: state.company.open,\r\n    data: state.company.data\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openGuestFormDialog: open => {\r\n      dispatch(openCompanyFormDialog(open));\r\n    },\r\n    saveDataCompany: data => {\r\n      dispatch(saveDataCompany(data));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withRouter(SaveCompany));\r\n","import React from \"react\";\r\nimport { openGuestFormDialog } from \"../actions/guestForm\";\r\nimport { openCompanyFormDialog } from \"../actions/company\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nclass HomePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Bienvenue sur EconomiseUnMaxDeTunes.argent</h1>\r\n        <p>\r\n          Si toi aussi tu aimes l'argent et surtout quand il reste sur ton\r\n          compte\r\n        </p>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            this.props.openGuestFormDialog(true);\r\n          }}\r\n          color=\"secondary\"\r\n        >\r\n          Economise!\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => {\r\n            this.props.openCompanyFormDialog(true);\r\n          }}\r\n          color=\"primary\"\r\n        >\r\n          Propose des économies\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mode: state.side.mode,\r\n    open: state.guestForm.open,\r\n    openCompany: state.company.open\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openGuestFormDialog: open => {\r\n      dispatch(openGuestFormDialog(open));\r\n    },\r\n    openCompanyFormDialog: open => {\r\n      dispatch(openCompanyFormDialog(open));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { openGuestFormDialog } from \"../actions/guestForm\";\r\nimport GuestForm from \"../components/guestForm\";\r\nimport CompanyForm from \"../components/save-company\";\r\nimport HomePage from \"../components/homePage\";\r\n\r\nclass DashboardCentral extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HomePage />\r\n        <GuestForm />\r\n        <CompanyForm />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    mode: state.side.mode,\r\n    open: state.guestForm.open\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    openGuestFormDialog: open => {\r\n      dispatch(openGuestFormDialog(open));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardCentral);\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { initializeIcons } from \"office-ui-fabric-react/lib-commonjs/Icons\";\r\nimport { connect } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nimport { fetchDataCompany, saveDataCompany } from \"./actions/company\";\r\nimport Footer from \"./components/footer\";\r\nimport DashboardCentral from \"./dashboard-central/dashboard-central\";\r\nimport \"./assets/styles/main.scss\";\r\n\r\ninitializeIcons();\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    let nothing = \"nothing\";\r\n    axios\r\n      .get(`http://nas.orriere.com/api/organizations/?format=json`)\r\n      .then(res => {\r\n        console.log(\"res\");\r\n        alert(res);\r\n        nothing = \"something\";\r\n      })\r\n      .catch(function(error) {\r\n        // handle error\r\n        console.log(error);\r\n      })\r\n      .finally(function() {\r\n        console.log(\"finally\", nothing);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div\r\n          className={`dashboard${this.props.mode === \"light\" ? \" light\" : \"\"}`}\r\n        >\r\n          <div className=\"dashboard-content\">\r\n            <Switch>\r\n              <Route path=\"/other\" render={() => <div>Other</div>} />\r\n              <Route component={DashboardCentral} />\r\n            </Switch>\r\n          </div>\r\n          <Footer />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchDataCompany: () => {\r\n      dispatch(fetchDataCompany());\r\n    },\r\n    saveDataCompany: data => {\r\n      dispatch(saveDataCompany(data));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { mode: state.side.mode };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  mode: \"\"\r\n};\r\n\r\nfunction side(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"SET_MODE\":\r\n      return {\r\n        ...state,\r\n        mode: action.mode\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default side;\r\n","const initialState = {\r\n  open: false\r\n};\r\n\r\nfunction guestForm(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"OPEN_GUEST_DIALOG\":\r\n      return {\r\n        ...state,\r\n        open: action.open\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default guestForm;\r\n","import * as _ from \"lodash\";\r\nconst initialState = {\r\n  open: false,\r\n  data: []\r\n};\r\n\r\nfunction company(state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"OPEN_COMPANY_DIALOG\":\r\n      return {\r\n        ...state,\r\n        open: action.open\r\n      };\r\n    case \"SAVE_COMPANY_DATA\":\r\n      const updatedCompany = _.concat(state.data, action.data);\r\n      return {\r\n        ...state,\r\n        data: updatedCompany\r\n      };\r\n    case \"FETCH_COMPANY_DATA\":\r\n      let xhr = new XMLHttpRequest();\r\n      xhr.open(\"GET\", \"nas.orriere.com/api/organizations/?format=json\");\r\n      const response = xhr.send();\r\n      return { response };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default company;\r\n","import { combineReducers } from \"redux\";\r\nimport side from \"./side\";\r\nimport guestForm from \"./guestForm\";\r\nimport company from \"./company\";\r\n\r\nconst rootReducer = combineReducers({\r\n  side,\r\n  guestForm,\r\n  company\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"./assets/styles/main.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}